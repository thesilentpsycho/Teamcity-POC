// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUIDemo
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using System.Linq;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfEdit uITbNameEdit = this.UIMainWindowWindow.UITbNameEdit;
            WpfEdit uITbIdEdit = this.UIMainWindowWindow.UITbIdEdit;
            WpfButton uISubmitButton = this.UIMainWindowWindow.UISubmitButton;
            #endregion
            this.RecordedMethod1Params.GenerateNewValues();
            // Type 'Prateek' in 'tbName' text box
            uITbNameEdit.Text = this.RecordedMethod1Params.UITbNameEditText;

            // Type '{Tab}' in 'tbName' text box
            Keyboard.SendKeys(uITbNameEdit, this.RecordedMethod1Params.UITbNameEditSendKeys, ModifierKeys.None);

            // Type '101010' in 'tbId' text box
            uITbIdEdit.Text = this.RecordedMethod1Params.UITbIdEditText;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(321, 32));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfText uITbResultText = this.UIMainWindowWindow.UITbResultText;
            #endregion

            // Verify that the 'DisplayText' property of 'tbResult' label equals 'Prateek 10101'
            Assert.AreEqual(mRecordedMethod1Params.UITbNameEditText+" "+mRecordedMethod1Params.UITbIdEditText, uITbResultText.DisplayText);
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class RecordedMethod1Params
    {
        private static readonly Random rand = new Random();
        public RecordedMethod1Params()
        {
            this.UITbIdEditText = rand.Next(10000, 9999999).ToString();
            this.UITbNameEditText = rand.Next(10000, 9999999).ToString();

        }

        public void GenerateNewValues()
        {
            var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            this.UITbNameEditText   = new string(
                                    Enumerable.Repeat(chars, 8)
                                    .Select(s => s[rand.Next(s.Length)])
                                    .ToArray());
            this.UITbIdEditText = rand.Next(10000, 9999999).ToString();
        }
        #region Fields
        /// <summary>
        /// Type 'Prateek' in 'tbName' text box
        /// </summary>
        public string UITbNameEditText;
        
        /// <summary>
        /// Type '{Tab}' in 'tbName' text box
        /// </summary>
        public string UITbNameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '101010' in 'tbId' text box
        /// </summary>
        public string UITbIdEditText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITbNameEdit
        {
            get
            {
                if ((this.mUITbNameEdit == null))
                {
                    this.mUITbNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITbNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbName";
                    this.mUITbNameEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITbNameEdit;
            }
        }
        
        public WpfEdit UITbIdEdit
        {
            get
            {
                if ((this.mUITbIdEdit == null))
                {
                    this.mUITbIdEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITbIdEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbId";
                    this.mUITbIdEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITbIdEdit;
            }
        }
        
        public WpfButton UISubmitButton
        {
            get
            {
                if ((this.mUISubmitButton == null))
                {
                    this.mUISubmitButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISubmitButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btSubmit";
                    this.mUISubmitButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISubmitButton;
            }
        }

        public WpfText UITbResultText
        {
            get
            {
                if ((this.mUITbResultText == null))
                {
                    this.mUITbResultText = new WpfText(this);
                    #region Search Criteria
                    this.mUITbResultText.SearchProperties[WpfText.PropertyNames.AutomationId] = "tbResult";
                    this.mUITbResultText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITbResultText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITbNameEdit;
        
        private WpfEdit mUITbIdEdit;
        
        private WpfButton mUISubmitButton;
        
        private WpfText mUITbResultText;
        #endregion
    }
}
